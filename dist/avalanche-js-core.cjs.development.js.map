{"version":3,"file":"avalanche-js-core.cjs.development.js","sources":["../src/blockchain.ts","../src/avalanche.ts","../src/truffleProvider.ts","../src/avalancheExtension.ts","../src/types.ts"],"sourcesContent":["/**\n # avalanche-js-core\n\nThis package provides a collection of apis to interact with Avalanche blockchain.\n\n## Installation\n\n```\nnpm install avalanche-js-core\n```\n\n## Usage\n\nCreate a Avalanche instance connecting to testnet\n\n```javascript\n* const { Avalanche } = require('avalanche-js-core');\n* const {\n*   ChainID,\n*   ChainType,\n*   hexToNumber,\n*   numberToHex,\n*   fromWei,\n*   Units,\n*   Unit,\n* } = require('avalanche-js-utils');\n\n* const hmy = new Avalanche(\n*     'https://api.s0.b.hmny.io/',\n*     {\n*         chainType: ChainType.Avalanche,\n*         chainId: ChainID.HmyTestnet,\n*     },\n* );\n```\n\nGetting balance of account `avax103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7`\n```javascript\n* hmy.blockchain\n*   .getBalance({ address: 'avax103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7' })\n*   .then((response) => {\n*     console.log('balance in AVAXs: ' + fromWei(hexToNumber(response.result), Units.avax));\n*   });\n```\n\nGetting the latest block number\n```javascript\n* hmy.blockchain.getBlockNumber().then((response) => {\n*   console.log('current block number: ' + hexToNumber(response.result));\n* });\n```\n\nGetting the block using block hash\n```javascript\n* hmy.blockchain\n*   .getBlockByHash({\n*     blockHash: '0x08c46ae7249362a7d1f602d44c5a81f33ebdab6a7dcb6068f99610b57911aafd',\n*   })\n*   .then((response) => {\n*     console.log(response.result);\n*   });\n```\n\nGetting the block using block number\n```javascript\n* hmy.blockchain\n*   .getBlockByNumber({\n*     blockNumber: numberToHex(422635),\n*   })\n*   .then((response) => {\n*     console.log(response.result);\n*   });\n```\n\nGetting the transaction using hash\n```javascript\n* hmy.blockchain\n*   .getTransactionByHash({\n*     txnHash: '0x56c73eb993b18dc04baacec5c2e9d1292a090f6a978a4a1c461db5255fcbc831',\n*   })\n*   .then((response) => {\n*     console.log(response.result);\n*   });\n```\n\nGetting the transaction receipt\n```javascript\n* hmy.blockchain\n*   .getTransactionReceipt({\n*     txnHash: '0x56c73eb993b18dc04baacec5c2e9d1292a090f6a978a4a1c461db5255fcbc831',\n*   })\n*   .then((response) => {\n*     console.log(response.result);\n*   });\n```\n\nGetting the cross-shard transaction receipt\n```javascript\n* hmy.blockchain\n*   .getCxReceiptByHash({\n*     txnHash: '0xcd36a90ff5d5373285c2896ba7bbcd3f5324263c0cb8ecfb7cad2f5fc2fbdbda',\n*     shardID: 1,\n*   })\n*   .then((value) => {\n*     console.log(value.result);\n*   });\n```\n\nGetting the deployed smart contract code\n```javascript\n* hmy.blockchain\n*   .getCode({\n*     address: '0x08AE1abFE01aEA60a47663bCe0794eCCD5763c19',\n*     blockNumber: 'latest',\n*   })\n*   .then((response) => {\n*     console.log(response.result);\n*   });\n```\n\nGetting the transaction count of an account\n```javascript\n* hmy.blockchain\n*   .getTransactionCount({\n*     address: 'avax1pdv9lrdwl0rg5vglh4xtyrv3wjk3wsqket7zxy',\n*   })\n*   .then((response) => {\n*     console.log(hexToNumber(response.result));\n*   });\n```\n\nGetting the shard structure and details\n```javascript\n* hmy.blockchain.getShardingStructure().then((response) => {\n*   console.log(response.result);\n* });\n```\n\nTransferring funds using `sendTransaction`\n```javascript\n// key corresponds to avax103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7, only has testnet balance\n* hmy.wallet.addByPrivateKey('45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e');\n\n* async function transfer() {\n*   const txn = hmy.transactions.newTx({\n*     to: 'avax166axnkjmghkf3df7xfvd0hn4dft8kemrza4cd2',\n*     value: new Unit(1).asAVAX().toWei(),\n*     // gas limit, you can use string\n*     gasLimit: '21000',\n*     // send token from shardID\n*     shardID: 0,\n*     // send token to toShardID\n*     toShardID: 0,\n*     // gas Price, you can use Unit class, and use Gwei, then remember to use toWei(), which will be transformed to BN\n*     gasPrice: new hmy.utils.Unit('1').asGwei().toWei(),\n*   });\n\n*   // sign the transaction use wallet;\n*   const signedTxn = await hmy.wallet.signTransaction(txn);\n*   const txnHash = await hmy.blockchain.sendTransaction(signedTxn);\n*   console.log(txnHash.result);\n* }\n\n* transfer();\n```\n *\n * @packageDocumentation\n * @module avalanche-core\n */\n\nimport {\n  RPCMethod,\n  Messenger,\n  ResponseMiddleware,\n  WSProvider,\n  NewPendingTransactions,\n  NewHeaders,\n  LogSub,\n  Syncing,\n} from 'avalanche-js-network';\n\nimport {\n  assertObject,\n  AssertType,\n  // AvalancheCore,\n  DefaultBlockParams,\n} from 'avalanche-js-utils';\n\nimport { getAddress } from 'avalanche-js-crypto';\n\nimport { Transaction } from 'avalanche-js-transaction';\nimport { StakingTransaction } from 'avalanche-js-staking';\n\nclass Blockchain {\n  /**\n   * @hidden\n   */\n  messenger: Messenger;\n\n  /**\n   * @hidden\n   */\n  constructor(messenger: Messenger) {\n    this.messenger = messenger;\n  }\n\n  /**\n   * @hidden\n   */\n  setMessenger(messenger: Messenger) {\n    this.messenger = messenger;\n  }\n\n  /**\n   *\n   * @hidden\n   */\n  getRpcResult(result: any) {\n    if (result instanceof ResponseMiddleware) {\n      return result.getRaw;\n    } else {\n      return result;\n    }\n  }\n\n  /**\n   * Get the balance of an address at a given block.\n   *\n   * @param address the address to get the balance of.\n   * @param blockNumber (option) If you pass this parameter it will not use the default block set with `DefaultBlockParams.latest`\n   * @param shardID (option) If you pass this parameter it will not use the default block set with `this.messenger.currentShard`\n   *\n   * @returns The current balance for the given address in wei.\n   *\n   * @hint\n   * ```\n   * the third param `shardID` is binding with the endpoint\n   * shard 0: localhost:9500\n   * shard 1: localhost:9501\n   * ```\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getBalance({\n   *   address: 'avax103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7',\n   *   blockNumber: 'latest'\n   * }).then(value => {\n   *   console.log(value.result);\n   * });\n   * ```\n   */\n  @assertObject({\n    address: ['isValidAddress', AssertType.required],\n    blockNumber: ['isBlockNumber', AssertType.optional],\n    shardID: ['isNumber', AssertType.optional],\n  })\n  async getBalance({\n    address,\n    blockNumber = DefaultBlockParams.latest,\n    shardID = this.messenger.currentShard,\n  }: {\n    address: string;\n    blockNumber?: string;\n    shardID?: number;\n  }) {\n    const result = await this.messenger.send(\n      RPCMethod.GetBalance,\n      [getAddress(address).checksum, blockNumber],\n      this.messenger.chainPrefix,\n      shardID,\n    );\n    return this.getRpcResult(result);\n  }\n\n  /**\n   * Returns the current block number.\n   *\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @return `Promise` - The number of the most recent block.\n   *\n   * @hint\n   * ```\n   * the third param `shardID` is binding with the endpoint\n   * shard 0: localhost:9500\n   * shard 1: localhost:9501\n   * ```\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getBlockNumber().then((value) => {\n   *   console.log(value.result);\n   * });\n   * ```\n   */\n  async getBlockNumber(shardID: number = this.messenger.currentShard) {\n    const result = await this.messenger.send(\n      RPCMethod.BlockNumber,\n      [],\n      this.messenger.chainPrefix,\n      shardID,\n    );\n    return this.getRpcResult(result);\n  }\n\n  /**\n   * Returns a block matching the block Hash.\n   *\n   * @param blockHash the block hash\n   * @param returnObject By default it is `true`, Features in development, IGNORE it!\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @returns `Promise` - The block object\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getBlockByHash({\n   *   blockHash: '0x9cd821b576efdff61280e8857ef218fb2cff8db0cf0fb27dfceef7237042b79e',\n   * }).then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n  @assertObject({\n    blockHash: ['isHash', AssertType.required],\n    returnObject: ['isBoolean', AssertType.optional],\n    shardID: ['isNumber', AssertType.optional],\n  })\n  async getBlockByHash({\n    blockHash,\n    returnObject = true,\n    shardID = this.messenger.currentShard,\n  }: {\n    blockHash: string;\n    returnObject?: boolean;\n    shardID?: number;\n  }) {\n    const result = await this.messenger.send(\n      RPCMethod.GetBlockByHash,\n      [blockHash, returnObject],\n      this.messenger.chainPrefix,\n      shardID,\n    );\n    return this.getRpcResult(result);\n  }\n\n  /**\n   * Returns a block matching the block Number.\n   *\n   * @param blockNumber the block number\n   * @param returnObject By default it is `true`, Features in development, IGNORE it!\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @returns `Promise` - The block object\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getBlockByNumber({\n   *   blockNumber: '0x89',\n   * }).then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n  @assertObject({\n    blockNumber: ['isBlockNumber', AssertType.optional],\n    returnObject: ['isBoolean', AssertType.optional],\n    shardID: ['isNumber', AssertType.optional],\n  })\n  async getBlockByNumber({\n    blockNumber = DefaultBlockParams.latest,\n    returnObject = true,\n    shardID = this.messenger.currentShard,\n  }: {\n    blockNumber?: string;\n    returnObject?: boolean;\n    shardID?: number;\n  }) {\n    const result = await this.messenger.send(\n      RPCMethod.GetBlockByNumber,\n      [blockNumber, returnObject],\n      this.messenger.chainPrefix,\n      shardID,\n    );\n    return this.getRpcResult(result);\n  }\n\n  /**\n   * Returns the number of transaction in a given block.\n   *\n   * @param blockHash the block number Hash\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @returns `Promise` -  The number of transactions in the given block.\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getBlockTransactionCountByHash({\n   *   blockHash: '0x4142514a238157e7fe57b9d54abedb33943507fa15b3799954c273a12705ced1'\n   * }).then((value) => {\n   *   console.log(value):\n   * });\n   * ```\n   */\n  @assertObject({\n    blockHash: ['isHash', AssertType.required],\n    shardID: ['isNumber', AssertType.optional],\n  })\n  async getBlockTransactionCountByHash({\n    blockHash,\n    shardID = this.messenger.currentShard,\n  }: {\n    blockHash: string;\n    shardID?: number;\n  }) {\n    const result = await this.messenger.send(\n      RPCMethod.GetBlockTransactionCountByHash,\n      [blockHash],\n      this.messenger.chainPrefix,\n      shardID,\n    );\n    return this.getRpcResult(result);\n  }\n\n  /**\n   * Returns the number of transaction in a given block.\n   *\n   * @param blockNumber the block number Hash\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @returns `Promise` -  The number of transactions in the given block.\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getBlockTransactionCountByNumber({\n   *   blockNumber: '0x2403C'\n   * }).then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n  @assertObject({\n    blockNumber: ['isBlockNumber', AssertType.required],\n    shardID: ['isNumber', AssertType.optional],\n  })\n  async getBlockTransactionCountByNumber({\n    blockNumber,\n    shardID = this.messenger.currentShard,\n  }: {\n    blockNumber: string;\n    shardID?: number;\n  }) {\n    const result = await this.messenger.send(\n      RPCMethod.GetBlockTransactionCountByNumber,\n      [blockNumber],\n      this.messenger.chainPrefix,\n      shardID,\n    );\n    return this.getRpcResult(result);\n  }\n\n  /**\n   * Returns a transaction based on a block hash and the transactions index position.\n   *\n   * @param blockHash the block number Hash\n   * @param index The transactions index position. **Hex Number**\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @returns `Promise` -  A transaction object\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getTransactionByBlockHashAndIndex({\n   *   blockHash: '0x4142514a238157e7fe57b9d54abedb33943507fa15b3799954c273a12705ced1',\n   *   index: '0x0'\n   * }).then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n  @assertObject({\n    blockHash: ['isHash', AssertType.required],\n    index: ['isHex', AssertType.required],\n    shardID: ['isNumber', AssertType.optional],\n  })\n  async getTransactionByBlockHashAndIndex({\n    blockHash,\n    index,\n    shardID = this.messenger.currentShard,\n  }: {\n    blockHash: string;\n    index: string;\n    shardID?: number;\n  }) {\n    const result = await this.messenger.send(\n      RPCMethod.GetTransactionByBlockHashAndIndex,\n      [blockHash, index],\n      this.messenger.chainPrefix,\n      shardID,\n    );\n    return this.getRpcResult(result);\n  }\n\n  /**\n   * Returns a transaction based on a block number and the transactions index position.\n   *\n   * @param blockNumber the block number\n   * @param index The transactions index position. **Hex Number**\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @returns `Promise` -  A transaction object\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getTransactionByBlockNumberAndIndex({\n   *   blockNumber: '0x2403C',\n   *   index: '0x0'\n   * }).then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n  @assertObject({\n    blockNumber: ['isBlockNumber', AssertType.optional],\n    index: ['isHex', AssertType.required],\n    shardID: ['isNumber', AssertType.optional],\n  })\n  async getTransactionByBlockNumberAndIndex({\n    blockNumber = DefaultBlockParams.latest,\n    index,\n    shardID = this.messenger.currentShard,\n  }: {\n    blockNumber?: string;\n    index: string;\n    shardID?: number;\n  }) {\n    const result = await this.messenger.send(\n      RPCMethod.GetTransactionByBlockNumberAndIndex,\n      [blockNumber, index],\n      this.messenger.chainPrefix,\n      shardID,\n    );\n    return this.getRpcResult(result);\n  }\n\n  /**\n   * Returns a transaction matching the given transaction hash.\n   *\n   * @param txnHash The transaction hash\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @returns `Promise` -  A transaction object\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getTransactionByHash({\n   *   txnHash: '0x146a0cf7e8da45b44194207c4e7785564527059483b765f9a04424554443b224'\n   * }).then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n  @assertObject({\n    txnHash: ['isHash', AssertType.required],\n    shardID: ['isNumber', AssertType.optional],\n  })\n  async getTransactionByHash({\n    txnHash,\n    shardID = this.messenger.currentShard,\n  }: {\n    txnHash: string;\n    shardID?: number;\n  }) {\n    const result = await this.messenger.send(\n      RPCMethod.GetTransactionByHash,\n      [txnHash],\n      this.messenger.chainPrefix,\n      shardID,\n    );\n    return this.getRpcResult(result);\n  }\n\n  /**\n   * Returns the receipt of a transaction by transaction hash.\n   *\n   * @param txnHash The transaction hash\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @returns `Promise` -  A transaction receipt object, or `null` when no receipt was found\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getTransactionReceipt({\n   *   txnHash: '0x146a0cf7e8da45b44194207c4e7785564527059483b765f9a04424554443b224'\n   * }).then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n  @assertObject({\n    txnHash: ['isString', AssertType.required],\n    shardID: ['isNumber', AssertType.optional],\n  })\n  async getTransactionReceipt({\n    txnHash,\n    shardID = this.messenger.currentShard,\n  }: {\n    txnHash: string;\n    shardID?: number;\n  }) {\n    const result = await this.messenger.send(\n      RPCMethod.GetTransactionReceipt,\n      [txnHash],\n      this.messenger.chainPrefix,\n      shardID,\n    );\n    return this.getRpcResult(result);\n  }\n\n  /**\n   * Get transaction recepit from cross shard transaction\n   *\n   * @param txnHash The transaction hash\n   * @param shardID the shard id of receiver's address\n   * @returns `Promise` -  A transaction receipt object, or `null` when no receipt was found\n   *\n   * @example\n   * ```javascript\n   * // This transaction sends from shard 0 to shard 1\n   * hmy.blockchain.getCxReceiptByHash({\n   *   txnHash: '0x7fae9252fbda68d718e610bc10cf2b5c6a9cafb42d4a6b9d6e392c77d587b9ea',\n   *   shardID: 1,\n   * }).then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n  @assertObject({\n    txnHash: ['isString', AssertType.required],\n    shardID: ['isNumber', AssertType.required],\n  })\n  async getCxReceiptByHash({ txnHash, shardID }: { txnHash: string; shardID: number }) {\n    const result = await this.messenger.send(\n      RPCMethod.GetCXReceiptByHash,\n      [txnHash],\n      this.messenger.chainPrefix,\n      shardID,\n    );\n    return this.getRpcResult(result);\n  }\n\n  /**\n   * Get the code at a specific address.\n   *\n   * @param address The address to get the code from (eg:smart contract)\n   * @param blockNumber (OPTIONAL) If you pass this parameter it will not use the default block\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @return `Promise` - The data at given `address`\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getCode({\n   *   address: '0x08AE1abFE01aEA60a47663bCe0794eCCD5763c19',\n   *   blockNumber: 'latest'\n   * }).then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n  @assertObject({\n    address: ['isValidAddress', AssertType.required],\n    blockNumber: ['isBlockNumber', AssertType.optional],\n    shardID: ['isNumber', AssertType.optional],\n  })\n  async getCode({\n    address,\n    blockNumber = DefaultBlockParams.latest,\n    shardID = this.messenger.currentShard,\n  }: {\n    address: string;\n    blockNumber?: string;\n    shardID?: number;\n  }) {\n    const result = await this.messenger.send(\n      RPCMethod.GetCode,\n      [getAddress(address).checksum, blockNumber],\n      this.messenger.chainPrefix,\n      shardID,\n    );\n    return this.getRpcResult(result);\n  }\n\n  /**\n   * Get the number of peers connected to.\n   *\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @returns `Promise` - number of peer count\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.net_peerCount().then((value) => {\n   *   console.log(value.result);\n   * });\n   * ```\n   */\n  async net_peerCount(shardID: number = this.messenger.currentShard) {\n    const result = await this.messenger.send(RPCMethod.PeerCount, [], 'net', shardID);\n\n    return this.getRpcResult(result);\n  }\n\n  /**\n   * Get the version of net.\n   *\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @returns `Promise` - the current version.\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.net_version().then((value) => {\n   *   console.log(value.result);\n   * });\n   * ```\n   */\n  async net_version(shardID: number = this.messenger.currentShard) {\n    const result = await this.messenger.send(RPCMethod.NetVersion, [], 'net', shardID);\n\n    return this.getRpcResult(result);\n  }\n\n  /**\n   * Get the protocal version.\n   *\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @returns `Promise` - the current protocol version.\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getProtocolVersion().then((value) => {\n   *   console.log(value.result);\n   * });\n   * ```\n   */\n  async getProtocolVersion(shardID: number = this.messenger.currentShard) {\n    const result = await this.messenger.send(\n      RPCMethod.ProtocolVersion,\n      [],\n      this.messenger.chainPrefix,\n      shardID,\n    );\n    return this.getRpcResult(result);\n  }\n\n  /**\n   * Get the storage at a specific position of an address\n   *\n   * @param address The address to get the storage from\n   * @param position The index position of the storage\n   * @param blockNumber by default it's `latest`.\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getStorageAt({\n   *   address: 'avax1d0kw95t6kkljmkk9vu0zv25jraut8ngv5vrs5g',\n   *   position: '0x0'\n   * }).then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n  @assertObject({\n    address: ['isValidAddress', AssertType.required],\n    position: ['isHex', AssertType.required],\n    blockNumber: ['isBlockNumber', AssertType.optional],\n    shardID: ['isNumber', AssertType.optional],\n  })\n  async getStorageAt({\n    address,\n    position,\n    blockNumber = DefaultBlockParams.latest,\n    shardID = this.messenger.currentShard,\n  }: {\n    address: string;\n    position: string;\n    blockNumber?: string;\n    shardID?: number;\n  }) {\n    const result = await this.messenger.send(\n      RPCMethod.GetStorageAt,\n      [getAddress(address).checksum, position, blockNumber],\n      this.messenger.chainPrefix,\n      shardID,\n    );\n    return this.getRpcResult(result);\n  }\n\n  /**\n   * Get the numbers of transactions sent from this address.\n   *\n   * @param address The address to get the numbers of transactions from\n   * @param blockNumber by default it's `latest`\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @return `Promise` - The number of transactions sent from the given address.\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getTransactionCount({\n   *   address: \"avax1d0kw95t6kkljmkk9vu0zv25jraut8ngv5vrs5g\"\n   * }).then((value) => {\n   *   console.log(value.result);\n   * });\n   * ```\n   */\n  @assertObject({\n    address: ['isValidAddress', AssertType.required],\n    blockNumber: ['isBlockNumber', AssertType.optional],\n    shardID: ['isNumber', AssertType.optional],\n  })\n  async getTransactionCount({\n    address,\n    blockNumber = DefaultBlockParams.latest,\n    shardID = this.messenger.currentShard,\n  }: {\n    address: string;\n    blockNumber?: string;\n    shardID?: number;\n  }) {\n    const result = await this.messenger.send(\n      RPCMethod.GetTransactionCount,\n      [getAddress(address).checksum, blockNumber],\n      this.messenger.chainPrefix,\n      shardID,\n    );\n    return this.getRpcResult(result);\n  }\n\n  /**\n   * Get the sharding structure of current network\n   *\n   * @return `Promise` - The sharding structure of current network.\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getShardingStructure().then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n  async getShardingStructure() {\n    const result = await this.messenger.send(\n      RPCMethod.GetShardingStructure,\n      [],\n      this.messenger.chainPrefix,\n    );\n    return this.getRpcResult(result);\n  }\n\n  /**\n   * Sends a signed transaction to the network.\n   *\n   * @param transaction `Object` - The transaction object to send:\n   * @return The **callbalck** will return the 32 bytes transaction hash\n   *\n   * @example\n   * ```javascript\n   * // add privateKey to wallet\n   * const privateKey = '45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e';\n   * hmy.wallet.addByPrivateKey(privateKey);\n   *\n   * async function transfer() {\n   *   const txn = hmy.transactions.newTx({\n   *     //  token send to\n   *     to: 'avax166axnkjmghkf3df7xfvd0hn4dft8kemrza4cd2',\n   *     // amount to send\n   *     value: '10000',\n   *     // gas limit, you can use string\n   *     gasLimit: '210000',\n   *     // send token from shardID\n   *     shardID: 0,\n   *     // send token to toShardID\n   *     toShardID: 0,\n   *     // gas Price, you can use Unit class, and use Gwei, then remember to use toWei(), which will be transformed to BN\n   *     gasPrice: new hmy.utils.Unit('100').asGwei().toWei(),\n   *   });\n   *\n   *   // sign the transaction use wallet;\n   *   const signedTxn = await hmy.wallet.signTransaction(txn);\n   *   const txnHash = await hmy.blockchain.sendTransaction(signedTxn);\n   *   console.log(txnHash.result);\n   * }\n   *\n   * transfer();\n   * ```\n   */\n  async sendTransaction(transaction: Transaction) {\n    if (!transaction.isSigned() || !transaction) {\n      throw new Error('transaction is not signed or not exist');\n    }\n    const result = await this.messenger.send(\n      RPCMethod.SendRawTransaction,\n      [transaction.getRawTransaction()],\n      this.messenger.chainPrefix,\n      typeof transaction.txParams.shardID === 'string'\n        ? Number.parseInt(transaction.txParams.shardID, 10)\n        : transaction.txParams.shardID,\n    );\n    return this.getRpcResult(result);\n  }\n\n  /**\n   * Sends a raw transaction to the network.\n   *\n   * @param transaction `Object` - The transaction object to send:\n   * @return The **callbalck** will return the 32 bytes transaction hash\n   *\n   * @example\n   * ```javascript\n   * // add privateKey to wallet\n   * const privateKey = '45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e';\n   * hmy.wallet.addByPrivateKey(privateKey);\n   *\n   * async function transfer() {\n   *   const txn = hmy.transactions.newTx({\n   *     //  token send to\n   *     to: 'avax166axnkjmghkf3df7xfvd0hn4dft8kemrza4cd2',\n   *     // amount to send\n   *     value: '10000',\n   *     // gas limit, you can use string\n   *     gasLimit: '210000',\n   *     // send token from shardID\n   *     shardID: 0,\n   *     // send token to toShardID\n   *     toShardID: 0,\n   *     // gas Price, you can use Unit class, and use Gwei, then remember to use toWei(), which will be transformed to BN\n   *     gasPrice: new hmy.utils.Unit('100').asGwei().toWei(),\n   *   });\n   *\n   *   // sign the transaction use wallet;\n   *   const signedTxn = await hmy.wallet.signTransaction(txn);\n   *   recovered = signedTxn.recover(signedTxn.rawTransaction);\n   *\n   *   const txnHash = await hmy.blockchain.sendRawTransaction(recovered);\n   *   console.log(txnHash);\n   * }\n   *\n   * transfer();\n   * ```\n   */\n  async sendRawTransaction(transaction: Transaction) {\n    if (!transaction.isSigned() || !transaction) {\n      throw new Error('transaction is not signed or not exist');\n    }\n    const [txn, result] = await transaction.sendTransaction();\n    if (txn.isPending()) {\n      return result;\n    }\n  }\n\n  /**\n   * send a transaction and check whether it exists\n   *\n   * @param transaction `Object` - The transaction object to send:\n   * @return The **callbalck** will return the 32 bytes transaction hash\n   *\n   * @example\n   * ```javascript\n   * // add privateKey to wallet\n   * const privateKey = '45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e';\n   * hmy.wallet.addByPrivateKey(privateKey);\n   *\n   * async function transfer() {\n   *   const txn = hmy.transactions.newTx({\n   *     //  token send to\n   *     to: 'avax166axnkjmghkf3df7xfvd0hn4dft8kemrza4cd2',\n   *     // amount to send\n   *     value: '10000',\n   *     // gas limit, you can use string\n   *     gasLimit: '210000',\n   *     // send token from shardID\n   *     shardID: 0,\n   *     // send token to toShardID\n   *     toShardID: 0,\n   *     // gas Price, you can use Unit class, and use Gwei, then remember to use toWei(), which will be transformed to BN\n   *     gasPrice: new hmy.utils.Unit('100').asGwei().toWei(),\n   *   });\n   *\n   *   // sign the transaction use wallet;\n   *   const signedTxn = await hmy.wallet.signTransaction(txn);\n   *   const txnHash = await hmy.blockchain.createObservedTransaction(signedTxn);\n   *   console.log(txnHash);\n   * }\n   *\n   * transfer();\n   * ```\n   */\n  createObservedTransaction(transaction: Transaction) {\n    try {\n      transaction.sendTransaction().then((response: any) => {\n        const [txReturned, TranID] = response;\n\n        txReturned.confirm(TranID).then((txConfirmed: Transaction) => {\n          transaction.emitter.resolve(txConfirmed);\n        });\n      });\n      return transaction.emitter;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  /**\n   * send raw staking transaction\n   *\n   * @param staking\n   * @ignore\n   *\n   * @warning\n   * ```\n   * At present, this function is not implement yet, will Coming soon!!!\n   * ```\n   */\n  async sendRawStakingTransaction(staking: StakingTransaction) {\n    if (!staking.isSigned() || !staking) {\n      throw new Error('staking transaction is not signed or not exist');\n    }\n    const [txn, result] = await staking.sendTransaction();\n    if (txn.isPending()) {\n      return result;\n    }\n  }\n\n  /**\n   * send raw staking transaction and check whether it exists\n   *\n   * @param staking\n   * @ignore\n   *\n   * @warning\n   * ```\n   * At present, this function is not implement yet, will Coming soon!!!\n   * ```\n   */\n  createObservedStakingTransaction(staking: StakingTransaction) {\n    try {\n      staking.sendTransaction().then((response: any) => {\n        const [txReturned, TranID] = response;\n\n        txReturned.confirm(TranID).then((txConfirmed: StakingTransaction) => {\n          staking.emitter.resolve(txConfirmed);\n        });\n      });\n      return staking.emitter;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  /**\n   * Executes a message call or transaction and returns the amount of the gas used.\n   *\n   * @param to the address will send to\n   * @param data the data will send to that address\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @return `promise` -  the used gas for the simulated call/transaction.\n   *\n   * @warning\n   * ```\n   * At present, this function hmy_estimateGas is not implement yet, will Coming soon!!!\n   * ```\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.estimateGas({\n   *   to: 'avax1d0kw95t6kkljmkk9vu0zv25jraut8ngv5vrs5g',\n   *   data: '0xc6888fa10000000000000000000000000000000000000000000000000000000000000003'\n   * }).then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n  @assertObject({\n    to: ['isValidAddress', AssertType.optional],\n    data: ['isHex', AssertType.optional],\n    shardID: ['isNumber', AssertType.optional],\n  })\n  async estimateGas({\n    to,\n    data,\n    shardID = this.messenger.currentShard,\n  }: {\n    to: string;\n    data: string;\n    shardID?: number;\n  }) {\n    const result = await this.messenger.send(\n      RPCMethod.EstimateGas,\n      [{ to: getAddress(to).checksum, data }],\n      this.messenger.chainPrefix,\n      shardID,\n    );\n    return this.getRpcResult(result);\n  }\n\n  /**\n   * Returns the current gas price oracle. The gas price is determined by the last few blocks median gas price.\n   *\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @return `promise` - Number string of the current gas price in wei.\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.gasPrice().then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n  async gasPrice(shardID: number = this.messenger.currentShard) {\n    const result = await this.messenger.send(\n      RPCMethod.GasPrice,\n      [],\n      this.messenger.chainPrefix,\n      shardID,\n    );\n    return this.getRpcResult(result);\n  }\n\n  /**\n   * Executes a message call transaction,\n   * which is directly executed in the VM of the node, but never mined into the blockchain.\n   *\n   * @param payload some data you want put into these fucntions\n   * @param blockNumber by default it's `latest`\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.call({\n   *   to: \"0x08AE1abFE01aEA60a47663bCe0794eCCD5763c19\",\n   * }).then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n  async call({\n    payload,\n    blockNumber = DefaultBlockParams.latest,\n    shardID = this.messenger.currentShard,\n  }: {\n    payload: any;\n    blockNumber?: string;\n    shardID?: number;\n  }) {\n    const result = await this.messenger.send(\n      RPCMethod.Call,\n      [payload, blockNumber],\n      this.messenger.chainPrefix,\n      shardID,\n    );\n    return this.getRpcResult(result);\n  }\n\n  /**\n   * Return new pending Transactions\n   *\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   *\n   * @example\n   * ```javascript\n   * const hmy = new Avalanche(\n   *   // rpc url\n   *   'ws://api.s0.b.hmny.io/',\n   *   {\n   *     // chainType set to Avalanche\n   *     chainType: ChainType.Avalanche,\n   *     // chainType set to HmyLocal\n   *     chainId: ChainID.HmyLocal,\n   *   },\n   * );\n   *\n   * const tmp = hmy.blockchain.newPendingTransactions();\n   * console.log(tmp)\n   * ```\n   */\n  newPendingTransactions(shardID: number = this.messenger.currentShard) {\n    if (this.messenger.provider instanceof WSProvider) {\n      return new NewPendingTransactions(this.messenger, shardID);\n    } else {\n      throw new Error('HttpProvider does not support this feature');\n    }\n  }\n\n  /**\n   *\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   *\n   * @example\n   * ```javascript\n   * const hmy = new Avalanche(\n   *   // rpc url\n   *   'ws://api.s0.b.hmny.io/',\n   *   {\n   *     // chainType set to Avalanche\n   *     chainType: ChainType.Avalanche,\n   *     // chainType set to HmyLocal\n   *     chainId: ChainID.HmyLocal,\n   *   },\n   * );\n   *\n   * const tmp = hmy.blockchain.newBlockHeaders();\n   * console.log(tmp)\n   * ```\n   */\n  newBlockHeaders(shardID: number = this.messenger.currentShard) {\n    if (this.messenger.provider instanceof WSProvider) {\n      return new NewHeaders(this.messenger, shardID);\n    } else {\n      throw new Error('HttpProvider does not support this feature');\n    }\n  }\n\n  /**\n   *\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   *\n   * @example\n   * ```javascript\n   * const hmy = new Avalanche(\n   *   // rpc url\n   *   'ws://api.s0.b.hmny.io/',\n   *   {\n   *     // chainType set to Avalanche\n   *     chainType: ChainType.Avalanche,\n   *     // chainType set to HmyLocal\n   *     chainId: ChainID.HmyLocal,\n   *   },\n   * );\n   *\n   * const tmp = hmy.blockchain.syncing();\n   * console.log(tmp)\n   * ```\n   */\n  syncing(shardID: number = this.messenger.currentShard) {\n    if (this.messenger.provider instanceof WSProvider) {\n      return new Syncing(this.messenger, shardID);\n    } else {\n      throw new Error('HttpProvider does not support this feature');\n    }\n  }\n\n  /**\n   *\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   *\n   * @example\n   * ```javascript\n   * const hmy = new Avalanche(\n   *   // rpc url\n   *   'ws://api.s0.b.hmny.io/',\n   *   {\n   *     // chainType set to Avalanche\n   *     chainType: ChainType.Avalanche,\n   *     // chainType set to HmyLocal\n   *     chainId: ChainID.HmyLocal,\n   *   },\n   * );\n   *\n   * const tmp = hmy.blockchain.logs({\n   *   from: '0x12'\n   * });\n   * console.log(tmp)\n   * ```\n   */\n  logs(options: any, shardID: number = this.messenger.currentShard) {\n    if (this.messenger.provider instanceof WSProvider) {\n      return new LogSub(options, this.messenger, shardID);\n    } else {\n      throw new Error('HttpProvider does not support this feature');\n    }\n  }\n}\n\nexport { Blockchain };\n","/**\n * @packageDocumentation\n * @module avalanche-core\n */\n\nimport * as crypto from 'avalanche-js-crypto';\nimport * as utils from 'avalanche-js-utils';\n\nimport { Provider, HttpProvider, Messenger, WSProvider, ShardingItem } from 'avalanche-js-network';\nimport { TransactionFactory, Transaction } from 'avalanche-js-transaction';\nimport { StakingTransaction, StakingFactory } from 'avalanche-js-staking';\nimport { ContractFactory, Contract } from 'avalanche-js-contract';\nimport { Wallet, Account } from 'avalanche-js-account';\nimport { Blockchain } from './blockchain';\nimport { AvalancheConfig } from './util';\n\nexport class Avalanche extends utils.AvalancheCore {\n  /**@ignore*/\n  Modules = {\n    HttpProvider,\n    WSProvider,\n    Messenger,\n    Blockchain,\n    TransactionFactory,\n    StakingFactory,\n    Wallet,\n    Transaction,\n    StakingTransaction,\n    Account,\n    Contract,\n  };\n  /**@ignore*/\n  messenger: Messenger;\n  /**@ignore*/\n  transactions: TransactionFactory;\n  /**@ignore*/\n  stakings: StakingFactory;\n  /**@ignore*/\n  wallet: Wallet;\n  /**@ignore*/\n  blockchain: Blockchain;\n  /**@ignore*/\n  contracts: ContractFactory;\n  /**@ignore*/\n  crypto: any;\n  /**@ignore*/\n  utils: any;\n  /**@ignore*/\n  defaultShardID?: number;\n  /**@ignore*/\n  private provider: HttpProvider | WSProvider;\n\n  /**\n   * Create a avalanche instance\n   *\n   * @param url The end-points of the hmy blockchain\n   * @param config set up `ChainID` and `ChainType`, typically we can use the default values\n   *\n   * @example\n   * ```\n   * // import or require Avalanche class\n   * const { Avalanche } = require('avalanche-js-core');\n   *\n   * // import or require settings\n   * const { ChainID, ChainType } = require('avalanche-js-utils');\n   *\n   * // Initialize the Avalanche instance\n   * const hmy = new Avalanche(\n   *   // rpc url:\n   *   // local: http://localhost:9500\n   *   // testnet: https://api.s0.b.hmny.io/\n   *   // mainnet: https://api.s0.t.hmny.io/\n   *   'http://localhost:9500',\n   *   {\n   *     // chainType set to Avalanche\n   *     chainType: ChainType.Avalanche,\n   *     // chainType set to HmyLocal\n   *     chainId: ChainID.HmyLocal,\n   *   },\n   * );\n   * ```\n   */\n  constructor(\n    url: string,\n    config: AvalancheConfig = {\n      chainId: utils.defaultConfig.Default.Chain_ID,\n      chainType: utils.defaultConfig.Default.Chain_Type,\n    },\n  ) {\n    super(config.chainType, config.chainId);\n\n    const providerUrl = config.chainUrl || url || utils.defaultConfig.Default.Chain_URL;\n\n    this.provider = new Provider(providerUrl).provider;\n    this.messenger = new Messenger(this.provider, this.chainType, this.chainId);\n    this.blockchain = new Blockchain(this.messenger);\n    this.transactions = new TransactionFactory(this.messenger);\n    this.stakings = new StakingFactory(this.messenger);\n    this.wallet = new Wallet(this.messenger);\n    this.contracts = new ContractFactory(this.wallet);\n    this.crypto = crypto;\n    this.utils = utils;\n    this.defaultShardID = config.shardID;\n    if (this.defaultShardID !== undefined) {\n      this.setShardID(this.defaultShardID);\n    }\n  }\n\n  /**\n   * Will change the provider for its module.\n   *\n   * @param provider a valid provider, you can replace it with your own working node\n   *\n   * @example\n   * ```javascript\n   * const tmp = hmy.setProvider('http://localhost:9500');\n   * ```\n   */\n  public setProvider(provider: string | HttpProvider | WSProvider): void {\n    this.provider = new Provider(provider).provider;\n    this.messenger.setProvider(this.provider);\n    this.setMessenger(this.messenger);\n  }\n\n  /**\n   * set the chainID\n   * \n   * @hint\n   * ```\n   * Default = 0,\n   * EthMainnet = 1,\n    Morden = 2,\n    Ropsten = 3,\n    Rinkeby = 4,\n    RootstockMainnet = 30,\n    RootstockTestnet = 31,\n    Kovan = 42,\n    EtcMainnet = 61,\n    EtcTestnet = 62,\n    Geth = 1337,\n    Ganache = 0,\n    HmyMainnet = 1,\n    HmyTestnet = 2,\n    HmyLocal = 2,\n    HmyPangaea = 3\n   * ```\n   * @param chainId \n   * \n   * @example\n   * ```\n   * hmy.setChainId(2);\n   * ```\n   */\n  public setChainId(chainId: utils.ChainID) {\n    this.chainId = chainId;\n    this.messenger.setChainId(this.chainId);\n    this.setMessenger(this.messenger);\n  }\n\n  /**\n   * Change the Shard ID\n   *\n   * @example\n   * ```\n   * hmy.setShardID(2);\n   * ```\n   */\n  public setShardID(shardID: number) {\n    this.defaultShardID = shardID;\n    this.messenger.setDefaultShardID(this.defaultShardID);\n    this.setMessenger(this.messenger);\n  }\n\n  /**\n   * set the chainType\n   *\n   * @param chainType `hmy` or `eth`\n   *\n   * @example\n   * ```\n   * // set chainType to hmy\n   * hmy.setChainType('hmy');\n   * // set chainType to eth\n   * hmy.setChainType('eth');\n   * ```\n   */\n  public setChainType(chainType: utils.ChainType) {\n    this.chainType = chainType;\n    this.messenger.setChainType(this.chainType);\n    this.setMessenger(this.messenger);\n  }\n\n  /**\n   * Set the sharding Structure\n   *\n   * @param shardingStructures The array of information of sharding structures\n   *\n   * @example\n   * ```javascript\n   * hmy.shardingStructures([\n   *   {\"current\":true,\"http\":\"http://127.0.0.1:9500\",\n   *    \"shardID\":0,\"ws\":\"ws://127.0.0.1:9800\"},\n   *   {\"current\":false,\"http\":\"http://127.0.0.1:9501\",\n   *    \"shardID\":1,\"ws\":\"ws://127.0.0.1:9801\"}\n   * ]);\n   * ```\n   */\n  public shardingStructures(shardingStructures: ShardingItem[]) {\n    for (const shard of shardingStructures) {\n      const shardID =\n        typeof shard.shardID === 'string' ? Number.parseInt(shard.shardID, 10) : shard.shardID;\n      this.messenger.shardProviders.set(shardID, {\n        current: shard.current !== undefined ? shard.current : false,\n        shardID,\n        http: shard.http,\n        ws: shard.ws,\n      });\n    }\n    this.setMessenger(this.messenger);\n  }\n\n  /**@ignore*/\n  private setMessenger(messenger: Messenger) {\n    this.blockchain.setMessenger(messenger);\n    this.wallet.setMessenger(messenger);\n    this.transactions.setMessenger(messenger);\n    this.stakings.setMessenger(messenger);\n  }\n}\n","/**\n * @packageDocumentation\n * @module avalanche-core\n * @hidden\n */\n\nimport {\n  HttpProvider,\n  WSProvider,\n  RPCRequestPayload,\n  ResponseMiddleware,\n} from 'avalanche-js-network';\n\nimport { ChainID, ChainType, Unit, isBech32Address } from 'avalanche-js-utils';\nimport { HDNode } from 'avalanche-js-account';\nimport { fromBech32, HRP } from 'avalanche-js-crypto';\n\nconst packageInfo = { version: '1.0.0' };\n\nexport interface ArgsResolver {\n  newArgs: any;\n  id: number;\n  params: any;\n  newMethod: string;\n  callback: (error: any, res?: any) => void;\n}\n\nexport interface HDOptions {\n  menmonic?: string;\n  index: number;\n  addressCount: number;\n}\n\nexport interface ChainOptions {\n  shardID: number;\n  chainType: ChainType;\n  chainId: ChainID;\n}\n\nexport interface TransactionOptions {\n  gasLimit: string;\n  gasPrice: string;\n}\n\nexport class TruffleProvider extends HDNode {\n  constructor(\n    provider: string | HttpProvider | WSProvider = 'http://localhost:9500',\n    hdOptions: HDOptions = {\n      menmonic: undefined,\n      index: 0,\n      addressCount: 1,\n    },\n    chainOptions: ChainOptions = {\n      shardID: 0,\n      chainType: ChainType.Avalanche,\n      chainId: ChainID.HmyLocal,\n    },\n    transactionOptions: TransactionOptions = {\n      gasLimit: '10000000',\n      gasPrice: '20000000000',\n    },\n  ) {\n    super(\n      provider,\n      hdOptions.menmonic,\n      hdOptions.index,\n      hdOptions.addressCount,\n      chainOptions.shardID,\n      chainOptions.chainType,\n      chainOptions.chainId,\n      transactionOptions.gasLimit,\n      transactionOptions.gasPrice,\n    );\n  }\n  async send(...args: [RPCRequestPayload<any>, any]) {\n    const { newArgs, id, params, newMethod, callback } = this.resolveArgs(...args);\n\n    switch (newMethod) {\n      case 'hmy_accounts': {\n        const accounts = this.getAccounts();\n        callback(null, {\n          result: accounts,\n          id,\n          jsonrpc: '2.0',\n        });\n        return {\n          result: accounts,\n          id,\n          jsonrpc: '2.0',\n        };\n        // break;\n      }\n      case 'hmy_sendTransaction': {\n        const txObj = params[0];\n        const rawTxn = await this.signTransaction(txObj);\n        const result = await this.provider.send(\n          {\n            id,\n            method: 'hmy_sendRawTransaction',\n            params: [rawTxn],\n            jsonrpc: '2.0',\n          },\n          (err: any, res: ResponseMiddleware | any) => this.resolveCallback(err, res, callback),\n        );\n        return this.resolveResult(result);\n\n        //  break;\n      }\n      case 'hmy_getTransactionReceipt': {\n        const result = await this.provider.send(\n          {\n            id,\n            method: 'hmy_getTransactionReceipt',\n            params: [params[0]],\n            jsonrpc: '2.0',\n          },\n          (err: any, res: any) => {\n            try {\n              if (err) {\n                callback(err);\n              }\n              const response = this.resolveResult(res);\n\n              if (response.result !== null) {\n                response.result.status = '0x1';\n              }\n              callback(null, response);\n            } catch (error) {\n              throw error;\n            }\n          },\n        );\n        return this.resolveResult(result);\n      }\n      case 'net_version': {\n        callback(null, {\n          result: String(this.messenger.chainId),\n          id,\n          jsonrpc: '2.0',\n        });\n        return {\n          result: String(this.messenger.chainId),\n          id,\n          jsonrpc: '2.0',\n        };\n      }\n      case 'web3_clientVersion': {\n        callback(null, {\n          result: `Avalanche/${packageInfo.version}/@avalanche-js`,\n          id,\n          jsonrpc: '2.0',\n        });\n        return {\n          result: `Avalanche/${packageInfo.version}/@avalanche-js`,\n          id,\n          jsonrpc: '2.0',\n        };\n      }\n      case 'hmy_getBlockByNumber': {\n        const result = await this.provider.send(newArgs, (err: any, res: any) => {\n          try {\n            if (err) {\n              callback(err);\n            }\n            const response = this.resolveResult(res);\n            if (response.error) {\n              callback(response.error);\n              return;\n            }\n\n            if (\n              new Unit(response.result.gasLimit)\n                .asWei()\n                .toWei()\n                .gt(new Unit(this.gasLimit).asWei().toWei())\n            ) {\n              response.result.gasLimit = `0x${new Unit(this.gasLimit)\n                .asWei()\n                .toWei()\n                .toString('hex')}`;\n            }\n            if (isBech32Address(response.result.miner)) {\n              response.result.miner = fromBech32(response.result.miner, HRP);\n            }\n            callback(null, response);\n          } catch (error) {\n            throw error;\n          }\n        });\n        return this.resolveResult(result);\n      }\n\n      default: {\n        // hmy_getBlockByNumber\n\n        const result = await this.provider.send(\n          newArgs,\n          (err: any, res: ResponseMiddleware | any) => this.resolveCallback(err, res, callback),\n        );\n\n        return this.resolveResult(result);\n        //  break;\n      }\n    }\n  }\n\n  sendAsync(...args: [RPCRequestPayload<any>, any]) {\n    return this.send(...args);\n  }\n\n  resolveArgs(...args: [RPCRequestPayload<any>, any]): ArgsResolver {\n    const method = args[0].method;\n    const params = args[0].params;\n    let newMethod: string = method;\n    if (method.startsWith('eth')) {\n      newMethod = method.replace('eth', 'hmy');\n    }\n    args[0].method = newMethod;\n\n    const { id } = args[0];\n\n    return {\n      newArgs: args[0],\n      id,\n      params,\n      newMethod,\n      callback: args[1],\n    };\n  }\n\n  resolveResult = (response: ResponseMiddleware | any) => {\n    const final = response.getRaw || response;\n    delete final.req;\n    delete final.responseType;\n    return final;\n  };\n  resolveCallback = (\n    err: any,\n    res: any,\n    callback: (error: any, res?: ResponseMiddleware | any) => void,\n  ) => {\n    try {\n      if (err) {\n        callback(err);\n      }\n      const response = this.resolveResult(res);\n      callback(null, response);\n    } catch (error) {\n      throw error;\n    }\n  };\n}\n","/**\n * @packageDocumentation\n * @module avalanche-core\n */\n\nimport {\n  HttpProvider,\n  WSProvider,\n  Messenger,\n  Provider,\n  RPCMethod,\n  ShardingItem,\n} from 'avalanche-js-network';\n\nimport * as crypto from 'avalanche-js-crypto';\nimport * as utils from 'avalanche-js-utils';\n\nimport { Transaction, TransactionFactory } from 'avalanche-js-transaction';\nimport { Blockchain } from './blockchain';\nimport { ContractFactory } from 'avalanche-js-contract';\nimport { AvalancheConfig } from './util';\n\n/** @hidden */\nexport enum ExtensionType {\n  MathWallet = 'MathWallet',\n  AVAXWallet = 'AVAXWallet',\n}\n\n/** @hidden */\nexport interface ExtensionAccount {\n  address: 'string';\n  name: 'string';\n}\n\n/** @hidden */\nexport interface ExtensionNetwork {\n  chain_url: string;\n  net_version: number;\n}\n\n/** @hidden */\nexport interface ExtensionInterface {\n  signTransaction: (\n    transaction: Transaction,\n    updateNonce: boolean,\n    encodeMode: string,\n    blockNumber: string,\n  ) => Promise<Transaction>;\n  getAccount: () => Promise<ExtensionAccount>;\n  forgetIdentity: () => Promise<void>;\n  messenger?: Messenger;\n  version: string;\n  isMathWallet?: boolean;\n  isAVAXWallet?: boolean;\n  network: ExtensionNetwork;\n}\n\nexport class AvalancheExtension {\n  /**@ignore*/\n  extensionType: ExtensionType | null;\n  /**@ignore*/\n  wallet: ExtensionInterface;\n  /**@ignore*/\n  provider: HttpProvider | WSProvider;\n  /**@ignore*/\n  messenger: Messenger;\n  /**@ignore*/\n  blockchain: Blockchain;\n  /**@ignore*/\n  transactions: TransactionFactory;\n  /**@ignore*/\n  contracts: ContractFactory;\n  /**@ignore*/\n  crypto: any;\n  /**@ignore*/\n  utils: any;\n  /**@ignore*/\n  defaultShardID?: number;\n\n  /**\n   * Create an blockchain instance support wallet injection\n   *\n   * @param wallet could be MathWallet or AVAXWallet instance\n   * @param config (optional), using default `Chain_Id` and `Chain_Type`\n   *\n   * @example\n   * ```javascript\n   * // Using Mathwallet instance\n   * export const initEx = async() => {\n   *   hmyEx = new AvalancheExtension(window.avalanche);\n   * }\n   * // Using AVAXWallet instance\n   * export const initEx = async() => {\n   *   hmyEx = new AvalancheExtension(window.avaxwallet);\n   * }\n   * ```\n   */\n  constructor(\n    wallet: ExtensionInterface,\n    config: AvalancheConfig = {\n      chainId: utils.defaultConfig.Default.Chain_ID,\n      chainType: utils.defaultConfig.Default.Chain_Type,\n    },\n  ) {\n    this.extensionType = null;\n    this.wallet = wallet;\n    // check if it is mathwallet or avaxwallet\n    this.isExtension(this.wallet);\n\n    if (wallet.messenger) {\n      this.provider = wallet.messenger.provider;\n      this.messenger = wallet.messenger;\n    } else {\n      this.provider = new Provider(config.chainUrl || wallet.network.chain_url).provider;\n      this.messenger = new Messenger(this.provider, config.chainType, config.chainId);\n    }\n    this.wallet.messenger = this.messenger;\n    this.blockchain = new Blockchain(this.messenger);\n    this.transactions = new TransactionFactory(this.messenger);\n    this.contracts = new ContractFactory(this.wallet);\n    this.crypto = crypto;\n    this.utils = utils;\n  }\n\n  /**\n   * Will change the provider for its module.\n   *\n   * @param provider a valid provider, you can replace it with your own working node\n   *\n   * @example\n   * ```javascript\n   * const tmp = hmyEx.setProvider('http://localhost:9500');\n   * ```\n   */\n  public setProvider(provider: string | HttpProvider | WSProvider): void {\n    this.provider = new Provider(provider).provider;\n    this.messenger.setProvider(this.provider);\n    this.setMessenger(this.messenger);\n  }\n\n  /**\n   * Change the Shard ID\n   *\n   * @example\n   * ```\n   * hmyEx.setShardID(2);\n   * ```\n   */\n  public setShardID(shardID: number) {\n    this.defaultShardID = shardID;\n    this.messenger.setDefaultShardID(this.defaultShardID);\n    this.setMessenger(this.messenger);\n  }\n\n  public isExtension(wallet: ExtensionInterface) {\n    let isExtension = false;\n    this.extensionType = null;\n    if (wallet.isMathWallet || wallet.isAVAXWallet) {\n      isExtension = true;\n      if (wallet.isMathWallet) this.extensionType = ExtensionType.MathWallet;\n      else this.extensionType = ExtensionType.AVAXWallet;\n\n      // remake signTransaction of MathWallet or AVAXWallet\n      const { signTransaction } = this.wallet;\n      this.wallet.signTransaction = async (\n        transaction: Transaction,\n        updateNonce: boolean = true,\n        encodeMode: string = 'rlp',\n        blockNumber: string = 'latest',\n      ) => {\n        const extensionAccount = await this.wallet.getAccount();\n\n        if (updateNonce) {\n          const nonce = await this.messenger.send(\n            RPCMethod.GetAccountNonce,\n            [crypto.getAddress(extensionAccount.address).checksum, blockNumber],\n            this.messenger.chainPrefix,\n            typeof transaction.txParams.shardID === 'string'\n              ? Number.parseInt(transaction.txParams.shardID, 10)\n              : transaction.txParams.shardID,\n          );\n          transaction.setParams({\n            ...transaction.txParams,\n            from: crypto.getAddress(extensionAccount.address).bech32,\n            nonce: Number.parseInt(utils.isHex(nonce.result.toString()) ? utils.hexToNumber(nonce.result.toString()) : nonce.result.toString(), 10),\n          });\n        } else {\n          transaction.setParams({\n            ...transaction.txParams,\n            from: crypto.getAddress(extensionAccount.address).bech32,\n          });\n        }\n\n        return signTransaction(transaction, false, encodeMode, blockNumber);\n      };\n    }\n    if (!isExtension) {\n      throw new Error('Extension is not found');\n    }\n    return;\n  }\n\n  /**\n   * Get the wallet account\n   *\n   * @example\n   * ```javascript\n   * const account = hmyEx.login();\n   * console.log(account);\n   * ```\n   */\n  public async login() {\n    const account = await this.wallet.getAccount();\n    // Use address\n    return account;\n  }\n\n  /**\n   * Log out the wallet account\n   *\n   * @example\n   * ```javascript\n   * hmyEx.logout();\n   * ```\n   */\n  public async logout() {\n    await this.wallet.forgetIdentity();\n  }\n\n  /**\n   * Set the sharding Structure\n   *\n   * @param shardingStructures The array of information of sharding structures\n   *\n   * @example\n   * ```javascript\n   * hmyEx.shardingStructures([\n   *   {\"current\":true,\"http\":\"http://127.0.0.1:9500\",\n   *    \"shardID\":0,\"ws\":\"ws://127.0.0.1:9800\"},\n   *   {\"current\":false,\"http\":\"http://127.0.0.1:9501\",\n   *    \"shardID\":1,\"ws\":\"ws://127.0.0.1:9801\"}\n   * ]);\n   * ```\n   */\n  public shardingStructures(shardingStructures: ShardingItem[]) {\n    for (const shard of shardingStructures) {\n      const shardID =\n        typeof shard.shardID === 'string' ? Number.parseInt(shard.shardID, 10) : shard.shardID;\n      this.messenger.shardProviders.set(shardID, {\n        current: shard.current !== undefined ? shard.current : false,\n        shardID,\n        http: shard.http,\n        ws: shard.ws,\n      });\n    }\n    this.setMessenger(this.messenger);\n  }\n\n  /**@ignore*/\n  private setMessenger(messenger: Messenger) {\n    this.blockchain.setMessenger(messenger);\n    this.wallet.messenger = messenger;\n    this.transactions.setMessenger(messenger);\n  }\n}\n","/**\n * @packageDocumentation\n * @module avalanche-core\n * @hidden\n */\n\nimport { HttpProvider, Messenger } from 'avalanche-js-network';\nimport { TransactionFactory, Transaction } from 'avalanche-js-transaction';\nimport { Wallet, Account } from 'avalanche-js-account';\nimport { ChainType, ChainID } from 'avalanche-js-utils';\nimport { Blockchain } from './blockchain';\n\nexport interface AvalancheModule {\n  HttpProvider: HttpProvider;\n  Messenger: Messenger;\n  Blockchain: Blockchain;\n  TransactionFactory: TransactionFactory;\n  Wallet: Wallet;\n  Transaction: Transaction;\n  Account: Account;\n}\n\nexport enum UrlType {\n  http,\n  ws,\n}\n\nexport interface AvalancheSetting<T extends ChainType, I extends ChainID> {\n  type: T;\n  id: I;\n}\n"],"names":["Blockchain","messenger","setMessenger","getRpcResult","result","ResponseMiddleware","getRaw","getBalance","address","blockNumber","DefaultBlockParams","latest","shardID","currentShard","send","RPCMethod","GetBalance","getAddress","checksum","chainPrefix","getBlockNumber","BlockNumber","getBlockByHash","blockHash","returnObject","GetBlockByHash","getBlockByNumber","GetBlockByNumber","getBlockTransactionCountByHash","GetBlockTransactionCountByHash","getBlockTransactionCountByNumber","GetBlockTransactionCountByNumber","getTransactionByBlockHashAndIndex","index","GetTransactionByBlockHashAndIndex","getTransactionByBlockNumberAndIndex","GetTransactionByBlockNumberAndIndex","getTransactionByHash","txnHash","GetTransactionByHash","getTransactionReceipt","GetTransactionReceipt","getCxReceiptByHash","GetCXReceiptByHash","getCode","GetCode","net_peerCount","PeerCount","net_version","NetVersion","getProtocolVersion","ProtocolVersion","getStorageAt","position","GetStorageAt","getTransactionCount","GetTransactionCount","getShardingStructure","GetShardingStructure","sendTransaction","transaction","isSigned","Error","SendRawTransaction","getRawTransaction","txParams","Number","parseInt","sendRawTransaction","txn","isPending","createObservedTransaction","then","response","txReturned","TranID","confirm","txConfirmed","emitter","resolve","err","sendRawStakingTransaction","staking","createObservedStakingTransaction","estimateGas","to","data","EstimateGas","gasPrice","GasPrice","call","payload","Call","newPendingTransactions","provider","WSProvider","NewPendingTransactions","newBlockHeaders","NewHeaders","syncing","Syncing","logs","options","LogSub","__decorate","assertObject","AssertType","required","optional","Avalanche","url","config","chainId","utils","Default","Chain_ID","chainType","Chain_Type","HttpProvider","Messenger","TransactionFactory","StakingFactory","Wallet","Transaction","StakingTransaction","Account","Contract","providerUrl","chainUrl","Chain_URL","Provider","blockchain","transactions","stakings","wallet","contracts","ContractFactory","crypto","defaultShardID","undefined","setShardID","setProvider","setChainId","setDefaultShardID","setChainType","shardingStructures","shard","shardProviders","set","current","http","ws","packageInfo","version","TruffleProvider","hdOptions","chainOptions","transactionOptions","menmonic","addressCount","ChainType","ChainID","HmyLocal","gasLimit","final","req","responseType","res","callback","resolveResult","error","resolveArgs","newArgs","id","params","newMethod","accounts","getAccounts","jsonrpc","txObj","signTransaction","rawTxn","method","resolveCallback","status","String","Unit","asWei","toWei","gt","toString","isBech32Address","miner","fromBech32","HRP","sendAsync","args","startsWith","replace","HDNode","ExtensionType","AvalancheExtension","extensionType","isExtension","network","chain_url","isMathWallet","isAVAXWallet","MathWallet","AVAXWallet","updateNonce","encodeMode","getAccount","extensionAccount","GetAccountNonce","nonce","setParams","from","bech32","login","account","logout","forgetIdentity","UrlType"],"mappings":"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"}